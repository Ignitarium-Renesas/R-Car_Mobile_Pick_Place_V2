import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import serial
import time
 
class MotorController(Node):
    def __init__(self):
        super().__init__('motor_controller')
 
        # Subscribe to cmd_vel topic
        self.subscription = self.create_subscription(Twist, 'cmd_vel', self.cmd_vel_callback, 10)
 
        # Open serial port
        self.serial_port = serial.Serial('/dev/ttyUSB0', 115200, timeout=2)  # Adjust port as needed
 
        # Robot parameters
        self.wheel_separation = 0.5  # Distance between left and right wheels
        self.max_motor_speed = 500  # Max motor speed (adjust as needed)
 
        # Timer for detecting command timeout
        self.last_cmd_time = time.time()
        self.create_timer(0.1, self.check_timeout)  # Run every 100ms (0.1 sec)
 
    def cmd_vel_callback(self, msg):
        """ Callback function for cmd_vel messages """
        self.last_cmd_time = time.time()  # Update last received time
 
        linear_x = msg.linear.x
        angular_z = msg.angular.z
 
        # Skid-steer calculations
        left_speed =  linear_x - (angular_z * self.wheel_separation / 2)
        right_speed = linear_x + (angular_z * self.wheel_separation / 2)
        self.get_logger().info(f"Left speed: {left_speed}")
        self.get_logger().info(f"Right speed: {right_speed}")
        # Scale speed to motor range (assuming 0-255 PWM)
        left_motor_speed  = int(0 + (left_speed * 359))
        
        right_motor_speed = int(0 + (right_speed * 359))

 
        # Ensure values are within valid range
        left_motor_speed = max(-self.max_motor_speed, min(self.max_motor_speed, left_motor_speed))
        right_motor_speed = max(-self.max_motor_speed, min(self.max_motor_speed, right_motor_speed))
 
        # Send motor command
        command = f"$FR:{right_motor_speed},FL:{left_motor_speed},BR:{right_motor_speed},BL:{left_motor_speed}#"
        self.serial_port.write(command.encode())
 
        self.get_logger().info(f'Sent command: {command.strip()}')
 
    def check_timeout(self):
        """ Check if cmd_vel message has timed out, stop motors if needed """
        if time.time() - self.last_cmd_time > 1.0:  # No message for 1 sec
            stop_command = " $FR:0,FL:0,BR:0,BL:0#\n"  # Stop motors
            # $FR:200,FL:200,BR:200,BL:200#
            self.serial_port.write(stop_command.encode())
            self.get_logger().warn("No cmd_vel received, stopping motors.")
 
def main(args=None):
    rclpy.init(args=args)
    node = MotorController()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
 
if __name__ == '__main__':
    main()